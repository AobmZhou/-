{"remainingRequest":"C:\\Users\\asus\\Desktop\\product\\backup\\node_modules\\_vue-loader@15.9.6@vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\asus\\Desktop\\product\\backup\\src\\Analysis\\TrendAnalysisPointTree.vue?vue&type=style&index=0&lang=scss&","dependencies":[{"path":"C:\\Users\\asus\\Desktop\\product\\backup\\src\\Analysis\\TrendAnalysisPointTree.vue","mtime":1626657240593},{"path":"C:\\Users\\asus\\Desktop\\product\\backup\\node_modules\\_css-loader@3.6.0@css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\asus\\Desktop\\product\\backup\\node_modules\\_vue-loader@15.9.6@vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"C:\\Users\\asus\\Desktop\\product\\backup\\node_modules\\_postcss-loader@3.0.0@postcss-loader\\src\\index.js","mtime":499162500000},{"path":"C:\\Users\\asus\\Desktop\\product\\backup\\node_modules\\_sass-loader@8.0.2@sass-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\asus\\Desktop\\product\\backup\\node_modules\\_cache-loader@4.1.0@cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\asus\\Desktop\\product\\backup\\node_modules\\_vue-loader@15.9.6@vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoudHJlbmQtYW5hbHlzaXMtcG9pbnQtdHJlZSB7CiAgaGVpZ2h0OiAyNTBweDsKICBvdmVyZmxvdzogYXV0bzsKICBiYWNrZ3JvdW5kLWNvbG9yOiAjM0M0NTVCOwogIG1hcmdpbi1ib3R0b206IDdweDsKCiAgLmVsLXNlbGVjdCB7CiAgICB3aWR0aDogNzAlOwogIH0KCiAgLmVsLXRyZWUgewogICAgYmFja2dyb3VuZDogIzNDNDU1QjsKCiAgICAuZWwtaW5wdXQgewogICAgICBmb250LXNpemU6IDEycHg7CiAgICB9CgogICAgLmVsLXRyZWUtbm9kZSA+IC5lbC10cmVlLW5vZGVfX2NvbnRlbnQgewogICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjM0M0NTVCICFpbXBvcnRhbnQ7CiAgICB9CgogICAgLmVsLXRyZWUtbm9kZS5pcy1jdXJyZW50ID4gLmVsLXRyZWUtbm9kZV9fY29udGVudCB7CiAgICAgIGJhY2tncm91bmQtY29sb3I6ICMzQzQ1NUIgIWltcG9ydGFudDsKICAgIH0KCiAgICAuZWwtdHJlZS1ub2RlX19jb250ZW50IHsKICAgICAgaGVpZ2h0OiA2MCU7CiAgICB9CgogICAgLmVsLXRyZWUtbm9kZV9fY29udGVudCA+IC5lbC10cmVlLW5vZGVfX2V4cGFuZC1pY29uIHsKICAgICAgcGFkZGluZzogMnB4OwogICAgfQoKICAgIC5lbC1jaGVja2JveCB7CiAgICAgIGZvbnQtc2l6ZTogMTNweDsKICAgIH0KCiAgICAuZWwtdHJlZS1ub2RlX19sYWJlbCB7CiAgICAgIGZvbnQtc2l6ZTogMTNweDsKICAgICAgY29sb3I6IHdoaXRlOwogICAgfQoKICAgIC5lbC1jaGVja2JveF9faW5wdXQuaXMtZGlzYWJsZWQuaXMtaW5kZXRlcm1pbmF0ZSAuZWwtY2hlY2tib3hfX2lubmVyIHsKICAgICAgYmFja2dyb3VuZC1jb2xvcjogIzQwOUVGRjsKICAgICAgYm9yZGVyLWNvbG9yOiAjNDA5RUZGOwogICAgfQogIH0KCn0K"},{"version":3,"sources":["TrendAnalysisPointTree.vue"],"names":[],"mappingskhBA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA","file":"TrendAnalysisPointTree.vue","sourceRoot":"src/Analysis","sourcesContent":["\n\n<template>\n  <div>\n    <el-form-item label=\"类型选择:\">\n      <el-select v-model=\"treeSelect\" placeholder=\"请选择类型\" @change=\"treeChange\">\n        <el-option label=\"多通道单特征值\" value=\"0\"></el-option>\n        <el-option label=\"单通道多特征值\" value=\"1\"></el-option>\n      </el-select>\n    </el-form-item>\n    <div class=\"trend-analysis-point-tree\" v-show=\"treeSelect == 0\">\n      <el-tree :data=\"pointTree1\" show-checkbox node-key=\"id\" :default-expanded-keys=\"['振动-位移']\"\n               @check=\"pointTree1Checked\"\n               accordion ref=\"pointFeatureTree1\" :render-content=\"renderContent\"></el-tree>\n    </div>\n    <div class=\"trend-analysis-point-tree\" v-show=\"treeSelect == 1\">\n      <el-tree :data=\"pointTree2\" accordion show-checkbox node-key=\"id\" :default-expanded-keys=\"['振动-位移']\"\n               @check=\"pointTree2Checked\" ref=\"pointFeatureTree2\"></el-tree>\n    </div>\n  </div>\n</template>\n\n<script>\n  export default {\n    name: \"TrendAnalysisPointTree\",\n    data() {\n      return {\n        treeSelect: \"0\",\n        featureSelect: [0, 0, 0],\n        \n        points: [],\n        pointTree1: [],\n        pointTree2: [],\n        cflag: 0,\n        lastChoosePoints: [],\n        defaultProps: {\n          children: 'children',\n          label: 'label',\n          disabled: function (data, node) {\n            if (node.store.getCheckedKeys(true).length >= 8) {\n              return node.store.getCheckedKeys(true).indexOf(data.id) < 0\n            }\n          }\n        },\n      };\n    },\n\n    mounted() {\n      if (this.nodeData[this.equid] != undefined) {\n        this.setPointTree(this.equid);\n      }\n    },\n\n    computed: {\n      nodeData() {\n        return this.$store.state.nodeData;\n      },\n      equid() {\n        return this.$store.state.equid;\n      },\n      nodeNum() {\n        return this.$store.state.nodeNum;\n      },\n      equipmentDetail() {\n        return this.$store.state.equipmentDetail;\n      }\n    },\n\n    watch: {\n      equid: {\n        handler(newEquid) {\n          // console.log(newEquid)\n          this.$nextTick(() => this.setPointTree(newEquid));\n\n          // console.log(this.pointTree1);\n        }\n      },\n      nodeNum: {\n        handler() {\n          this.setPointTree(this.equid);\n          // console.log(this.pointTree1);\n        }\n      }\n    },\n\n    methods: {\n      setPointTree(equid) {\n        let that = this;\n        let newEquid = equid;\n        // console.log(this.equipmentDetail)\n        setTimeout(function () {\n\n          let _data = that.equipmentDetail[newEquid];\n          // console.log(_data);\n          if (_data == undefined)\n            return;\n          that.points = [];\n          for (const i in _data) {\n            if (_data[i].dataType == 1 || _data[i].dataType == 2 || _data[i].dataType == 0) {\n              that.points.push(_data[i]);\n            }\n          }\n          // console.log(that.pointTree1,'-------iii---------')\n          that.setPointTree1();\n          that.setPointTree2();\n          that.$nextTick(() => {\n            for (const i in that.pointTree1) {\n              if (that.pointTree1[i].children.length > 1) {\n                that.$refs.pointFeatureTree1.setCheckedKeys([that.pointTree1[i].children[0].id, that.pointTree1[i].children[1].id]);\n                that.lastChoosePoints = [that.pointTree1[i].children[1]];\n                break;\n              }\n            }\n            for (const i in that.pointTree2) {\n              if (that.pointTree2[i].children.length > 0) {\n                // console.log(i)\n                let tempList = [];\n                this.cflag = that.pointTree2[i].children[0].pid;\n\n                for (const j in that.pointTree2[i].children[0].children) {\n                  tempList.push(that.pointTree2[i].children[0].children[j].id);\n                  if (j > 5) {\n                    break;\n                  }\n                }\n                that.$refs.pointFeatureTree2.setCheckedKeys(tempList);\n\n                break;\n              }\n            }\n            if (that.treeSelect == \"0\") {\n              that.pointTree1Checked();\n            } else {\n              that.pointTree2Checked();\n            }\n            that.$emit('firstdo');\n\n          });\n\n        }, 1000);\n      },\n\n      setPointTree1() {\n        this.pointTree1 = [];\n        // console.log('-------iii---------')\n        let tmpDisplacement = {\n          id: '振动-位移',\n          label: '振动-位移',\n          children: []\n        };\n        let tmpAcceleration = {\n          id: '振动-加速度',\n          label: '振动-加速度',\n          children: []\n        };\n        let tmpSpeed = {\n          id: '振动-速度',\n          label: '振动-速度',\n          children: []\n        };\n        let tmp2 = {\n          id: '特征-位移',\n          label: '特征',\n          disabled: true,\n          type: 113,\n        };\n        let tmp3 = {\n          id: '特征-加速度',\n          label: '特征',\n          disabled: true,\n          type: 113,\n        };\n        let tmp4 = {\n          id: '特征-速度',\n          label: '特征',\n          disabled: true,\n          type: 113,\n        };\n        tmpDisplacement['children'].push(tmp2);\n        tmpAcceleration['children'].push(tmp3);\n        tmpSpeed['children'].push(tmp4);\n        // console.log('-------iii---------')\n        let that = this;\n        let flag1 = 0, flag2 = 0, flag3 = 0;\n        for (const i in this.points) {\n          let tmp1 = {\n            id: that.points[i].pointId,\n            label: that.points[i].pointName,\n            pointUuid: that.points[i].pointUuid,\n            dataType: that.points[i].dataType,\n          };\n          if (that.points[i].dataType == 0) {\n            tmpDisplacement['children'].push(tmp1);\n            if (flag1 == 0) {\n              tmpDisplacement['children'][0].type = that.points[i].type;\n              flag1 = 1;\n            }\n          } else if (that.points[i].dataType == 1) {\n            tmpAcceleration['children'].push(tmp1);\n            if (flag2 == 0) {\n              tmpAcceleration['children'][0].type = that.points[i].type;\n              flag2 = 1;\n            }\n          } else if (that.points[i].dataType == 2) {\n            tmpSpeed['children'].push(tmp1);\n            if (flag3 == 0) {\n              tmpSpeed['children'][0].type = that.points[i].type;\n              flag3 = 1;\n            }\n          }\n        }\n        // console.log('-------iii---------')\n        if (tmpDisplacement.children.length > 1)\n          this.pointTree1.push(tmpDisplacement);\n        if (tmpAcceleration.children.length > 1)\n          this.pointTree1.push(tmpAcceleration);\n        if (tmpSpeed.children.length > 1)\n          this.pointTree1.push(tmpSpeed);\n      },\n\n      setPointTree2() {\n        this.pointTree2 = [];\n        let tmpDisplacement = {\n          id: '振动-位移',\n          label: '振动-位移',\n          xid: '振动-位移',\n          disabled: true,\n          children: []\n        };\n        let tmpAcceleration = {\n          id: '振动-加速度',\n          label: '振动-加速度',\n          xid: '振动-加速度',\n          disabled: true,\n          children: []\n        };\n        let tmpSpeed = {\n          id: '振动-速度',\n          label: '振动-速度',\n          xid: '振动-速度',\n          disabled: true,\n          children: []\n        };\n        for (const i in this.points) {\n          let tmp1 = {\n            id: this.points[i].pointId,\n            pointUuid: this.points[i].pointUuid,\n            label: this.points[i].pointName,\n            xid: this.points[i].pointId,\n            children: [],\n            pid: this.points[i].pointId,\n          };\n          let type = this.points[i].type;\n          if (type != 113 && type != 114) {\n            // console.log(this.points[i].pointName)\n          }\n          for (const j in this.$store.state.features[type]) {\n            let tmp2 = {\n              id: tmp1['id'] + j.toString(),\n              pointUuid: tmp1['pointUuid'],\n              label: this.$store.state.features[type][j].label,\n              xid: j.toString(),\n              pid: tmp1['id']\n            };\n            tmp1['children'].push(tmp2);\n          }\n          if (this.points[i].dataType == 0) {\n            tmpDisplacement['children'].push(tmp1);\n          } else if (this.points[i].dataType == 1) {\n            tmpAcceleration['children'].push(tmp1);\n          } else if (this.points[i].dataType == 2) {\n            tmpSpeed['children'].push(tmp1);\n          }\n        }\n        if (tmpDisplacement.children.length > 0)\n          this.pointTree2.push(tmpDisplacement);\n        if (tmpAcceleration.children.length > 0)\n          this.pointTree2.push(tmpAcceleration);\n        if (tmpSpeed.children.length > 0)\n          this.pointTree2.push(tmpSpeed);\n        // console.log(this.pointTree2);\n      },\n\n      pointTree1Checked(data) {\n        let checkedNodes = this.$refs.pointFeatureTree1.getCheckedNodes() || [];\n        if (data) {\n          console.log('pointTree1', this.pointTree1);\n          console.log('mydata', data);\n          let NowChose = [];\n          if (data.id == '振动-位移') {\n            // console.log('点击全选');\n            for(var item = 0; item < this.pointTree1.length; item++) {\n              if(this.pointTree1[item].id == '振动-位移') {\n                  for (var i = 0; i < this.pointTree1[item].children.length && i < 9; i++) {//本来是最多选8个测点，由于特征的存在，故这里为9\n                      NowChose.push(this.pointTree1[item].children[i].id);\n                  }\n                  break;\n              }\n            }\n            \n            this.$refs.pointFeatureTree1.setCheckedKeys(NowChose);\n          } else if (data.id == '振动-加速度') {\n            // console.log('点击全选');\n            for(var item = 0; item < this.pointTree1.length; item++) {\n              if(this.pointTree1[item].id == '振动-加速度') {\n                  for (var i = 0; i < this.pointTree1[item].children.length && i < 9; i++) {//本来是最多选8个测点，由于特征的存在，故这里为9\n                      NowChose.push(this.pointTree1[item].children[i].id);\n                  }\n                  break;\n              }\n            }\n            // for (var i = 0; i < this.pointTree1[1].children.length && i < 9; i++) {\n            //   NowChose.push(this.pointTree1[1].children[i].id);\n            // }\n            this.$refs.pointFeatureTree1.setCheckedKeys(NowChose);\n          } else if (data.id == '振动-速度') {\n            for(var item = 0; item < this.pointTree1.length; item++) {\n              if(this.pointTree1[item].id == '振动-速度') {\n                  for (var i = 0; i < this.pointTree1[item].children.length && i < 9; i++) {//本来是最多选8个测点，由于特征的存在，故这里为9\n                      NowChose.push(this.pointTree1[item].children[i].id);\n                  }\n                  break;\n              }\n            }\n            // console.log('点击全选');\n            // for (var i = 0; i < this.pointTree1[2].children.length && i < 9; i++) {\n            //   NowChose.push(this.pointTree1[2].children[i].id);\n            // }\n            this.$refs.pointFeatureTree1.setCheckedKeys(NowChose);\n          }  else if (this.lastChoosePoints.length == 0 || data.dataType != this.lastChoosePoints[0].dataType) {\n            // console.log('单选');\n            \n            var tmpstring  = '';\n            if(data.dataType == 0) {\n              tmpstring = '振动-位移';\n            } else if(data.dataType == 1) {\n              tmpstring = '振动-加速度';\n            } else if(data.dataType == 2) {\n              tmpstring = '振动-速度';\n            }\n            for(var item = 0; item < this.pointTree1.length; item++) {\n              if(tmpstring == this.pointTree1[item].id) {\n                NowChose = [this.pointTree1[item].children[0].id, data.id];\n                // console.log('单选', this.pointTree1[item].children[0].id, data.id);\n                break;\n              }\n            }\n            \n            // NowChose = [this.pointTree1[data.dataType].children[0].id, data.id];\n            this.$refs.pointFeatureTree1.setCheckedKeys(NowChose);\n          }\n          checkedNodes = this.$refs.pointFeatureTree1.getCheckedNodes();\n          console.log('checkedNodes', checkedNodes);\n          this.lastChoosePoints = [];\n          for (const i in checkedNodes) {\n            if (checkedNodes[i].id != '振动-位移' && checkedNodes[i].id != '振动-加速度' &&\n              checkedNodes[i].id != '振动-速度' && checkedNodes[i].id.indexOf('特征') == -1) {\n              this.lastChoosePoints.push(checkedNodes[i])\n            }\n          }\n        }\n\n        let returnTreeData = {};\n        returnTreeData['treeSelect'] = this.treeSelect;\n        returnTreeData['checkedNodes'] = this.$refs.pointFeatureTree1.getHalfCheckedNodes();\n        checkedNodes = checkedNodes.filter((item) => {\n          return item.id.indexOf('特征') == -1;\n        });\n        for (let i = 0; i < checkedNodes.length; i++) {\n          if (checkedNodes[i].label == \"特征\")\n            continue;\n          returnTreeData['featureSelect'] = this.featureSelect[checkedNodes[i].dataType]; //最好要改\n          returnTreeData['checkedNodes'].push(checkedNodes[i]);\n        }\n        if (returnTreeData['checkedNodes'].length > 1) {\n          returnTreeData.featureSelect = this.featureSelect[returnTreeData['checkedNodes'][1].dataType];\n        }\n\n        console.log(\"getPointFeatureTree2Data\", returnTreeData);\n        this.$emit('getPointFeatureTree2Data', returnTreeData);\n      },\n\n      pointTree2Checked(data) {\n\n        let checkedNodes = this.$refs.pointFeatureTree2.getCheckedNodes();\n        let halfCheckedNodes = this.$refs.pointFeatureTree2.getHalfCheckedNodes();\n        console.log(checkedNodes, 'daxin')\n        // if (halfCheckedNodes.length > 2 || checkedNodes.length > 7) {\n        //   this.$refs.pointFeatureTree2.setCheckedNodes([data]);\n        // }\n        if (data != undefined) {\n          var newc = []\n          var flag = -1;\n          for (var i = 0; i < checkedNodes.length; ++i) {\n            if (checkedNodes[i].id == data.id) {\n              flag = i;\n              break;\n            }\n          }\n          if (flag != -1) {\n            if (data.pid != this.cflag) {\n              newc.push(data.id);\n              this.cflag = data.pid;\n              this.$refs.pointFeatureTree2.setCheckedKeys(newc)\n            }\n          }\n        }\n        checkedNodes = this.$refs.pointFeatureTree2.getCheckedNodes();\n        halfCheckedNodes = this.$refs.pointFeatureTree2.getHalfCheckedNodes();\n        var cc = [];\n        let returnTreeData = {};\n        console.log(\"打印奇怪的东西\",checkedNodes);\n        if (checkedNodes.length > 0) {\n          if (checkedNodes[0].id.indexOf('振动') != -1) {\n            for (var i = 1; i < checkedNodes.length; ++i) {\n              cc.push(checkedNodes[i])\n            }\n            returnTreeData['type'] = checkedNodes[0].label;\n            checkedNodes = cc;\n\n          }\n        }\n\n        returnTreeData['treeSelect'] = this.treeSelect;\n        returnTreeData['checkedNodes'] = [];\n        for (let i = 0; i < halfCheckedNodes.length; i++) {\n          if (halfCheckedNodes[i].id.indexOf(\"振动\") != -1) {\n            returnTreeData['type'] = halfCheckedNodes[i].label;\n            continue;\n          }\n          returnTreeData['checkedNodes'].push(halfCheckedNodes[i]);\n          returnTreeData['checkedNodes'][0].type = returnTreeData['type'];\n        }\n        for (let i = 0; i < checkedNodes.length; i++) {\n          if (checkedNodes[i].id.indexOf(\"振动\") != -1) {\n            returnTreeData['type'] = checkedNodes[i].label;\n            continue;\n          }\n          returnTreeData['checkedNodes'].push(checkedNodes[i]);\n          returnTreeData['checkedNodes'][0].type = returnTreeData['type'];\n        }\n        // console.log(returnTreeData);\n        this.$emit('getPointFeatureTree2Data', returnTreeData);\n      },\n\n      treeChange(value) {\n        this.$nextTick(() => {\n          if (value == \"0\") {\n            this.pointTree1Checked();\n          } else if (value == \"1\") {\n            this.pointTree2Checked();\n          }\n        });\n      },\n\n      renderContent(h, {node, data, store}) {\n        if (node.label == '特征') {\n          // console.log(data.type)\n          let dataType = 0;\n          let tempTypeSelect = this.$store.state.features[data.type];\n          // let tempTypeSelect = [];\n          // console.log(node)\n          if (node.data.id == '特征-位移') {\n            dataType = 0;\n          } else if (node.data.id == '特征-加速度') {\n            dataType = 1;\n          } else if (node.data.id == '特征-速度') {\n            dataType = 2;\n          }\n          return h(\n            \"div\", [\n              h(\n                \"span\", {\n                  style: {\n                    fontSize: '13px',\n                    color: '#ffffff',\n                    marginRight: '5px'\n                  },\n                }, \"特征\"\n              ), h(\n                \"el-select\", {\n                  class: \"el-select--mini el-input--mini\",\n                  style: {\n                    width: '55%'\n                  },\n                  on: {\n                    input: (value) => {\n                      this.$set(this.featureSelect, dataType, value);\n                      this.pointTree1Checked();\n                    }\n                  },\n                  props: {\n                    value: this.featureSelect[dataType]\n                  }\n                }, [\n                  tempTypeSelect.map(item => {\n                    return h(\n                      \"el-option\", {\n                        style: {\n                          lineHeight: '18px',\n                          fontSize: '13px',\n                          height: '18px'\n                        },\n                        props: {\n                          value: item.id,\n                          label: item.label\n                        }\n                      }\n                    );\n                  })\n                ]\n              )\n            ]\n          );\n        } else {\n          return h(\n            \"span\", {\n              style: {\n                fontSize: '13px',\n                color: '#ffffff'\n              },\n            }, node.label\n          );\n        }\n      }\n    },\n  }\n</script>\n\n<style lang=\"scss\">\n  .trend-analysis-point-tree {\n    height: 250px;\n    overflow: auto;\n    background-color: #3C455B;\n    margin-bottom: 7px;\n\n    .el-select {\n      width: 70%;\n    }\n\n    .el-tree {\n      background: #3C455B;\n\n      .el-input {\n        font-size: 12px;\n      }\n\n      .el-tree-node > .el-tree-node__content {\n        background-color: #3C455B !important;\n      }\n\n      .el-tree-node.is-current > .el-tree-node__content {\n        background-color: #3C455B !important;\n      }\n\n      .el-tree-node__content {\n        height: 60%;\n      }\n\n      .el-tree-node__content > .el-tree-node__expand-icon {\n        padding: 2px;\n      }\n\n      .el-checkbox {\n        font-size: 13px;\n      }\n\n      .el-tree-node__label {\n        font-size: 13px;\n        color: white;\n      }\n\n      .el-checkbox__input.is-disabled.is-indeterminate .el-checkbox__inner {\n        background-color: #409EFF;\n        border-color: #409EFF;\n      }\n    }\n\n  }\n</style>\n"]}]}